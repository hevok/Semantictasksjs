// Generated by CoffeeScript 1.6.2
(function() {
  jQuery(function() {
    var getWebCam, gotRemoteStream, makePeer, myIceCallback, onAnswer, onError, onOffer, onWebCamSuccess, otherIceCallback, peerMe, peerOther, stream2Vid, video, videoOther,
      _this = this;

    video = document.getElementById('mywebcam');
    video.autoplay = true;
    videoOther = document.getElementById('webcam1');
    videoOther.autoplay = true;
    getWebCam = function() {
      navigator.getUserMedia || (navigator.getUserMedia = navigator.mozGetUserMedia || navigator.webkitGetUserMedia || navigator.msGetUserMedia);
      if (navigator.getUserMedia) {
        return navigator.getUserMedia({
          video: true,
          audio: true
        }, onWebCamSuccess, onError);
      } else {
        return alert("getUserMedia is not supported in this browser.");
      }
    };
    onWebCamSuccess = function(stream) {
      stream2Vid(video, stream);
      peerMe.addStream(stream);
      return peerMe.createOffer(onOffer);
    };
    onError = function() {
      return alert("There has been a problem retrieving the streams - did you allow access?");
    };
    myIceCallback = function(event) {
      if (event.candidate != null) {
        return peerOther.addIceCandidate(new RTCIceCandidate(event.candidate));
      }
    };
    otherIceCallback = function(event) {
      if (event.candidate != null) {
        return peerMe.addIceCandidate(new RTCIceCandidate(event.candidate));
      }
    };
    onOffer = function(desc) {
      peerMe.setLocalDescription(desc);
      peerOther.setRemoteDescription(desc);
      return peerOther.createAnswer(onAnswer);
    };
    onAnswer = function(desc) {
      peerOther.setLocalDescription(desc);
      return peerMe.setRemoteDescription(desc);
    };
    makePeer = function(servers) {
      if (servers == null) {
        servers = null;
      }
      if (window.RTCPeerConnection != null) {
        return new RTCPeerConnection(servers);
      } else {
        if (window.mozRTCPeerConnection != null) {
          return new mozRTCPeerConnection(servers);
        } else {
          return new webkitRTCPeerConnection(servers);
        }
      }
    };
    stream2Vid = function(vid, stream) {
      var videoSource;

      if (window.webkitURL != null) {
        videoSource = window.webkitURL.createObjectURL(stream);
      } else {
        videoSource = stream;
      }
      return vid.src = videoSource;
    };
    gotRemoteStream = function(e) {
      return stream2Vid(videoOther, e.stream);
    };
    peerMe = makePeer();
    peerOther = makePeer();
    peerMe.onicecandidate = myIceCallback;
    peerOther.onicecandidate = otherIceCallback;
    peerOther.onaddstream = gotRemoteStream;
    return getWebCam();
  });

}).call(this);

/*
//@ sourceMappingURL=video.map
*/
