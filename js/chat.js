//@ sourceMappingURL=chat.map
// Generated by CoffeeScript 1.6.1

/*
  #Chat App#
  Application coffee of the chat
*/


(function() {
  var Chat, container,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Batman.config.minificationErrors = false;

  Chat = (function(_super) {

    __extends(Chat, _super);

    /*
    Application object of the chat
    */


    function Chat() {
      return Chat.__super__.constructor.apply(this, arguments);
    }

    Chat.root('');

    Chat.workerHandler = function(e) {
      /*
        handles worker messages
      */
      return Chat.login(e.data);
    };

    Chat.login = function(data) {
      /*
        functions that fires when you logged in
        The loggin message can come from both shared webworker and loginform
        ant that is a reason why I put it here
      */

      var socket;
      if ((data.user != null) && (data.password != null)) {
        if (Chat.Login.validate(data.user, data.password)) {
          /*
            check if everything is OK with username and password
          */

          Chat.Login.login(data.user, data.password);
          socket = Batman.Socket.getInstance(data.websocketURL);
          socket.router = new Batman.SimpleRouter();
          if (Chat.ws != null) {
            socket.setWebsocket(Chat.ws);
          } else {
            socket.setWebsocket(new WebSocket(data.websocketURL));
          }
          return Chat.fire("login", data);
        }
      }
    };

    Chat.initWorker = function() {
      /*
        Decides whether it should connect directly or through shared webworker
      */
      if (Batman.container.workerURL != null) {
        Chat.ws = new Batman.WorkerSocket(Batman.container.workerURL);
        return Chat.ws.onmessage = function(e) {
          return Chat.workerHandler(e);
        };
      }
    };

    Chat.send = function(data) {
      /*
        TODO: rename the function
      */
      if (Chat.ws != null) {
        return Chat.ws.send(data);
      } else {
        return Chat.login(data);
      }
    };

    return Chat;

  })(Batman.App);

  container = Batman.container;

  container.Chat = Chat;

  Batman.EmptyDispatcher = (function(_super) {

    __extends(EmptyDispatcher, _super);

    /*
    to switch routing off
    */


    function EmptyDispatcher() {
      return EmptyDispatcher.__super__.constructor.apply(this, arguments);
    }

    return EmptyDispatcher;

  })(Batman.Object);

  if ((typeof window !== "undefined" && window !== null)) {
    window.addEventListener('load', function() {
      var disp;
      disp = new Batman.EmptyDispatcher();
      Chat.set("navigator", disp);
      Chat.set("dispatcher", disp);
      Chat.run();
      return Chat.initWorker();
    });
  }

}).call(this);
